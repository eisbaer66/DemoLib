// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PurgeDemoCommands.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("PurgePazer")]
    public partial class PurgePazerFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PurgePazer.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "PurgePazer", "\tIn order to view demos without consolecomands\r\n\tAs a TF2 player\r\n\tI want to remo" +
                    "ve consolecomands from demo-files", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("purge single demo")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void PurgeSingleDemo()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("purge single demo", new string[] {
                        "mytag"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("the arguments [TestData\\_\\0-Me-Intro.dem]", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.And("the timeout 1000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.When("I run PurgeDemoComands", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "TestData\\_\\purged\\0-Me-Intro.dem"});
#line 11
 testRunner.Then("I expect files", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("purge multiple demos")]
        public virtual void PurgeMultipleDemos()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("purge multiple demos", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
 testRunner.Given("the arguments [TestData\\_\\0-Me-Intro.dem TestData\\_\\19-Me-Using-Other-Spies-As-De" +
                    "coy.dem]", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 16
 testRunner.And("the timeout 2000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
 testRunner.When("I run PurgeDemoComands", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "TestData\\_\\purged\\0-Me-Intro.dem"});
            table2.AddRow(new string[] {
                        "TestData\\_\\purged\\19-Me-Using-Other-Spies-As-Decoy.dem"});
#line 18
 testRunner.Then("I expect files", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("purge folder \'_\'")]
        public virtual void PurgeFolder_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("purge folder \'_\'", ((string[])(null)));
#line 22
this.ScenarioSetup(scenarioInfo);
#line 23
 testRunner.Given("the arguments [TestData\\_]", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 24
 testRunner.And("the timeout 2000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
 testRunner.When("I run PurgeDemoComands", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "TestData\\_\\purged\\0-Me-Intro.dem"});
            table3.AddRow(new string[] {
                        "TestData\\_\\purged\\19-Me-Using-Other-Spies-As-Decoy.dem"});
#line 26
 testRunner.Then("I expect files", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("purge folder \'1\'")]
        public virtual void PurgeFolder1()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("purge folder \'1\'", ((string[])(null)));
#line 30
this.ScenarioSetup(scenarioInfo);
#line 31
 testRunner.Given("the arguments [TestData\\1]", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 32
 testRunner.And("the timeout 20000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
 testRunner.When("I run PurgeDemoComands", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "TestData\\1\\purged\\0-Me-Intro.dem"});
            table4.AddRow(new string[] {
                        "TestData\\1\\purged\\1-Intro-Commander-Snowcat.dem"});
            table4.AddRow(new string[] {
                        "TestData\\1\\purged\\2-Losing-the-spycicle-Rattlewrench.dem"});
            table4.AddRow(new string[] {
                        "TestData\\1\\purged\\3-Blob-Attacking-Spy-Payload.dem"});
            table4.AddRow(new string[] {
                        "TestData\\1\\purged\\4-Turbine-Mirkiens.dem"});
            table4.AddRow(new string[] {
                        "TestData\\1\\purged\\5-Nice-Work-By-Kenpachi.dem"});
            table4.AddRow(new string[] {
                        "TestData\\1\\purged\\6-Things-did-not-go-well-for-Palex-5CP.dem"});
            table4.AddRow(new string[] {
                        "TestData\\1\\purged\\7-Things-went-a-little-better-for-Palxex-5CP.dem"});
            table4.AddRow(new string[] {
                        "TestData\\1\\purged\\8-Tricking-Medic-In-To-Sentry-Fire-Palexlife-tick-5000.dem"});
            table4.AddRow(new string[] {
                        "TestData\\1\\purged\\9-too-many-kritz-Commander-snowcat.dem"});
            table4.AddRow(new string[] {
                        "TestData\\1\\purged\\10-Amadeus-Distrupting-The-Engineers.dem"});
            table4.AddRow(new string[] {
                        "TestData\\1\\purged\\11-Amadeus-Competetive.dem"});
            table4.AddRow(new string[] {
                        "TestData\\1\\purged\\12-Passive-Spy-Reptomansam.dem"});
            table4.AddRow(new string[] {
                        "TestData\\1\\purged\\13-Dochnicht-weakness-of-dead-ringer.dem"});
            table4.AddRow(new string[] {
                        "TestData\\1\\purged\\14-TheDop-Quick-And-Easy.dem"});
            table4.AddRow(new string[] {
                        "TestData\\1\\purged\\15-Me-Capping-5CP.dem"});
            table4.AddRow(new string[] {
                        "TestData\\1\\purged\\16-Me-Time-To-Death-From-Stab-On-Soldier-To-Scout-Killed.dem"});
            table4.AddRow(new string[] {
                        "TestData\\1\\purged\\17-Me-Being-Clever-With-Teleporters.dem"});
            table4.AddRow(new string[] {
                        "TestData\\1\\purged\\18-Me-The-Bullets-Curve.dem"});
            table4.AddRow(new string[] {
                        "TestData\\1\\purged\\19-Me-Using-Other-Spies-As-Decoy.dem"});
#line 34
 testRunner.Then("I expect files", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("purge folder \'2\'")]
        public virtual void PurgeFolder2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("purge folder \'2\'", ((string[])(null)));
#line 56
this.ScenarioSetup(scenarioInfo);
#line 57
 testRunner.Given("the arguments [TestData\\2]", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 58
 testRunner.And("the timeout 7000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 59
 testRunner.When("I run PurgeDemoComands", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "TestData\\2\\purged\\bodyblock.dem"});
            table5.AddRow(new string[] {
                        "TestData\\2\\purged\\episode3.dem"});
            table5.AddRow(new string[] {
                        "TestData\\2\\purged\\frontalassault.dem"});
            table5.AddRow(new string[] {
                        "TestData\\2\\purged\\HOW_TO_PAYLOAD.dem"});
            table5.AddRow(new string[] {
                        "TestData\\2\\purged\\mannofsteel.dem"});
            table5.AddRow(new string[] {
                        "TestData\\2\\purged\\powergunner.dem"});
#line 60
 testRunner.Then("I expect files", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
